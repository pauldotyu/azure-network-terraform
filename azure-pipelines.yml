# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
- group: kvdevops1
- name: RG_NAME
  value: rg-devops
- name: ACI_NAME
  value: acicontoso
- name: ACI_IMAGE
  value: contosocr.azurecr.io/azpcontoso:latest
- name: ACI_IDENTITY
  value: /subscriptions/672f7b3e-5c19-454f-bb04-4843676bf396/resourceGroups/rg-devops/providers/Microsoft.ManagedIdentity/userAssignedIdentities/acicontoso
- name: ACR_LOGIN_SERVER
  value: contosocr.azurecr.io
- name: VNET_NAME
  value: vn-devops
- name: SNET_NAME
  value: ACISubnet
- name: AZDO_URL
  value: https://dev.azure.com/ContosoUniversity/
- name: AZDO_POOL
  value: Contoso

stages:
- stage: start_aci
  displayName: Build Prep
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: start_aci
    displayName: Create build agent
    steps:
    - task: AzureCLI@2
      displayName: Create Azure Container Instance
      inputs:
        azureSubscription: 'terraform'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az container create \
            -g $(RG_NAME) \
            -n $(ACI_NAME)-$(Build.BuildId) \
            --image $(ACI_IMAGE) \
            --registry-login-server $(ACR_LOGIN_SERVER) \
            --registry-username $(acrdevops1-pull-usr) \
            --registry-password $(acrdevops1-pull-pwd) \
            --assign-identity $(ACI_IDENTITY) \
            --ip-address Private \
            --vnet $(VNET_NAME) \
            --subnet $(SNET_NAME) \
            --restart-policy never \
            --cpu 1 \
            --memory 1 \
            --os-type Linux \
            -e AZP_URL=$(AZDO_URL) AZP_AGENT_NAME=$(ACI_NAME) AZP_POOL=$(AZDO_POOL) \
            --secure-environment-variables AZP_TOKEN=$(devops-pat)
- stage: terraform_plan
  displayName: Terraform Plan
  dependsOn: start_aci
  condition: and(succeeded(), eq(variables.destroy, false))
  pool:
    name: Contoso
    demands:
      - agent.name -equals acicontoso
  jobs:
  - job: terraform_plan
    displayName: Terraform Plan
    steps:
    - script: |
        export ARM_CLIENT_ID=$(client-id) 
        export ARM_CLIENT_SECRET=$(client-secret)
        export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
        export ARM_TENANT_ID=$(tenant-id)
        terraform init \
          -backend-config="resource_group_name=rg-devops" \
          -backend-config="storage_account_name=satfstate98722" \
          -backend-config="container_name=cloudops-network-tfstate" \
          -backend-config="key=terraform.tfstate"
        terraform plan -var="digicert_ssl_validation_key=$(digicert-ssl-validation-key)" -var="vpn_preshared_key=$(vpn-preshared-key)" -out=$(System.DefaultWorkingDirectory)/$(Build.BuildId).tfplan
      displayName: Terraform init and plan
    - task: PublishPipelineArtifact@1
      displayName: Publish $(Build.BuildId).tfplan
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/$(Build.BuildId).tfplan
        artifactName: $(Build.BuildId).tfplan
- stage: terraform_apply
  displayName: Terraform Apply
  dependsOn: terraform_plan
  condition: succeeded()
  pool:
    name: Contoso
    demands:
      - agent.name -equals acicontoso
  jobs:
  - job: manual_validation
    displayName: Approval Gate
    pool: Server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: $(notifyUsers)
        instructions: 'Have you looked at the plan output?'
  - job: terraform_apply
    displayName: Terraform Apply
    dependsOn: manual_validation
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download $(Build.BuildId).tfplan
      inputs:
        artifactName: $(Build.BuildId).tfplan
        patterns: '**/$(Build.BuildId).tfplan'
        path: $(System.DefaultWorkingDirectory)
    - script: |
        export ARM_CLIENT_ID=$(client-id) 
        export ARM_CLIENT_SECRET=$(client-secret)
        export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
        export ARM_TENANT_ID=$(tenant-id)
        terraform init \
          -backend-config="resource_group_name=rg-devops" \
          -backend-config="storage_account_name=satfstate98722" \
          -backend-config="container_name=cloudops-network-tfstate" \
          -backend-config="key=terraform.tfstate"
        terraform apply --auto-approve $(System.DefaultWorkingDirectory)/$(Build.BuildId).tfplan
      displayName: Terraform init and apply
- stage: terraform_destroy
  displayName: Terraform Destroy
  dependsOn: start_aci
  condition: and(succeeded(), eq(variables.destroy, true))
  pool:
    name: Contoso
    demands: 
      - agent.name -equals acicontoso
  jobs: 
  - job: manual_validation
    displayName: Approval Gate
    pool: Server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: $(notifyUsers)
        instructions: 'Are you sure you want to destroy everything?'
  - job: terraform_destroy
    displayName: terraform destroy
    dependsOn: manual_validation
    steps: 
    - script: |
        export ARM_CLIENT_ID=$(client-id) 
        export ARM_CLIENT_SECRET=$(client-secret)
        export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
        export ARM_TENANT_ID=$(tenant-id)
        terraform init \
          -backend-config="resource_group_name=rg-devops" \
          -backend-config="storage_account_name=satfstate98722" \
          -backend-config="container_name=cloudops-network-tfstate" \
          -backend-config="key=terraform.tfstate"
        terraform destroy -var="digicert_ssl_validation_key=$(digicert-ssl-validation-key)" -var="vpn_preshared_key=$(vpn-preshared-key)" --auto-approve
      displayName: Terraform init and destroy
      name: terraform_destroy
- stage: stop_aci
  displayName: Build Cleanup
  dependsOn:
  - terraform_apply
  - terraform_destroy
  condition: or(succeeded('terraform_apply'), succeeded('terraform_destroy'))
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: stop_aci
    displayName: Delete build agent
    steps:
    - task: AzureCLI@2
      displayName: Delete Azure Container Instance
      inputs:
        azureSubscription: 'terraform'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az container delete -n $(ACI_NAME)-$(Build.BuildId) -g $(RG_NAME) -y'